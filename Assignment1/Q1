# Intensity Windowing

%matplotlib inline
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

def custom_intensity_transform(pixel_value):
    if pixel_value >= 0 and pixel_value <= 50:
        return pixel_value * (50 / 50)
    elif pixel_value > 50 and pixel_value <= 150:
        return (pixel_value - 50) * ((255 - 100) / (150 - 50)) + 100
    elif pixel_value > 150 and pixel_value <= 255:
        return (pixel_value - 150) * ((255 - 150) / (255 - 150)) + 150
    else:
        return pixel_value


# Plotting the intensity transformation graph
fig, axes = plt.subplots(1, 3, figsize=(16, 4))

axes[0].plot(np.arange(256), [custom_intensity_transform(i) for i in range(256)])
axes[0].set_xlabel(r'Input, $f(\mathbf{x})$')
axes[0].set_ylabel('Output, $\mathrm{T}[f(\mathbf{x})]$')
axes[0].set_xlim(0, 255)
axes[0].set_ylim(0, 255)
axes[0].set_aspect('equal')
axes[0].set_title('Intensity Transformation')

# Load and display the original image
img_orig = cv.imread('emma.jpg', cv.IMREAD_GRAYSCALE)
img_orig = cv.cvtColor(img_orig, cv.COLOR_BGR2RGB)
axes[1].imshow(img_orig)
axes[1].set_title('Original Image')

#axes[1].axis('off')

# Apply the custom intensity transformation
transformed_image = np.vectorize(custom_intensity_transform)(img_orig)

axes[2].imshow(transformed_image)
axes[2].set_title('Transformed Image')
#axes[2].axis('off')

plt.tight_layout()
plt.show()
plt.figure(figsize=(16,4))
plt.imshow(transformed_image)
plt.title('Image Transformed')
plt.xticks([])
plt.yticks([])
plt.show() 
