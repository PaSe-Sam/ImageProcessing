import cv2 as cv
import matplotlib.pyplot as plt
import numpy as np

img_orig = cv.imread('jeniffer.jpg', cv.IMREAD_COLOR)

img_hsv = cv.cvtColor(img_orig, cv.COLOR_BGR2HSV)

h, s, v = cv.split(img_hsv)

plt.figure(figsize=(10, 10))

plt.subplot(1, 3, 1)
plt.imshow(h)
plt.title('H Channel')
cv.imwrite('H.jpg', h)

plt.subplot(1, 3, 2)
plt.imshow(s)
plt.title('S Channel')
cv.imwrite('S.jpg', s)

plt.subplot(1, 3, 3)
plt.imshow(v)
plt.title('V Channel')
cv.imwrite('v.jpg', v)

plt.show()

_,mask_v = cv.threshold(v, 155, 255, cv.THRESH_BINARY) 
plt.figure(figsize=(6, 6))
plt.imshow(mask_v)
plt.title('Mask')
plt.show()
cv.imwrite('mask.jpg', mask_v)
v_foreground = cv.bitwise_and(img_orig, img_orig, mask=mask_v)

v_foreground = cv.cvtColor(v_foreground, cv.COLOR_BGR2RGB)
plt.figure(figsize=(6, 6))
plt.imshow(v_foreground)
plt.title('Foreground')
plt.show()

cv.imwrite('foreground.jpg', v_foreground)

color = ('b', 'g', 'r')
for i, c in enumerate(color):
    hist = cv.calcHist([v_foreground], [i], None, [256], [0,256])
    plt.plot(hist, color = c)
    plt.xlim([0,256])
plt.title('Histogram of image in R, G, B')
plt.show()

hist_b = cv.calcHist([v_foreground], [0], None, [256], [0,256])
hist_g = cv.calcHist([v_foreground], [1], None, [256], [0,256])
hist_r = cv.calcHist([v_foreground], [2], None, [256], [0,256])

c_hist_r = np.cumsum(hist_r)
c_hist_g = np.cumsum(hist_g)
c_hist_b = np.cumsum(hist_b)


plt.figure(figsize=(15, 5))
plt.subplot(131)
plt.plot(c_hist_r, color='red')
plt.title('Cumulative Histogram of Red Channel')
plt.xlabel('Pixel Value')
plt.ylabel('Cumulative Frequency')
plt.subplot(132)
plt.plot(c_hist_g, color='green')
plt.title('Cumulative Green Channel Histogram')
plt.xlabel('Pixel Value')
plt.ylabel('Cumulative Frequency')
plt.subplot(133)
plt.plot(c_hist_b, color='blue')
plt.title('Cumulative Blue Channel Histogram')
plt.xlabel('Pixel Value')
plt.ylabel('Cumulative Frequency')
plt.tight_layout()
plt.show()

equ_b = cv.equalizeHist(v_foreground[:, :, 0])
equ_g = cv.equalizeHist(v_foreground[:, :, 1])
equ_r = cv.equalizeHist(v_foreground[:, :, 2])

equ_img = cv.merge((equ_b, equ_g, equ_r))

equ_hist_b = cv.calcHist([equ_img], [0], None, [256], [0, 256])
equ_hist_g = cv.calcHist([equ_img], [1], None, [256], [0, 256])
equ_hist_r = cv.calcHist([equ_img], [2], None, [256], [0, 256])

c_equ_hist_b = np.cumsum(equ_hist_b)
c_equ_hist_g = np.cumsum(equ_hist_g)
c_equ_hist_r = np.cumsum(equ_hist_r)

plt.figure(figsize=(14, 4))
plt.subplot(1, 2, 1)
plt.imshow(cv.cvtColor(v_foreground, cv.COLOR_BGR2RGB))
plt.title('Foreground')
plt.axis('off')
plt.subplot(1, 2, 2)
plt.imshow(cv.cvtColor(equ_img, cv.COLOR_BGR2RGB))
plt.title('Equalized Foreground')
plt.axis('off')
plt.tight_layout()
plt.show()

plt.figure(figsize=(14, 4))
plt.subplot(131)
plt.plot(c_equ_hist_r, color='red')
plt.title('Cumulative Histogram of Equalized Red Channel',fontsize=11)
plt.xlabel('Pixel Value')
plt.ylabel('Cumulative Frequency')
plt.subplot(132)
plt.plot(c_equ_hist_g, color='green')
plt.title('Cumulative Histogram of Equalized Green Channel',fontsize=11)
plt.xlabel('Pixel Value')
plt.ylabel('Cumulative Frequency')
plt.subplot(133)
plt.plot(c_equ_hist_b, color='blue')
plt.title('Cumulative Histogram of Equalized Blue Channel',fontsize=11)
plt.xlabel('Pixel Value')
plt.ylabel('Cumulative Frequency')
plt.tight_layout()
plt.show()

v_background = cv.bitwise_and(img_orig, img_orig, mask=cv.bitwise_not(mask_v)) 
hist_equ_img = cv.add(v_background, equ_img)

plt.figure(figsize=(6, 6))
plt.imshow(v_background, cmap='gray')
plt.title('Background on S Channel')
plt.show()

plt.figure(figsize=(14, 4))
plt.subplot(1, 4, 1)
plt.imshow(cv.cvtColor(img_orig, cv.COLOR_BGR2RGB))
plt.title('Original Image')
plt.axis('off')
plt.subplot(1, 4, 2)
plt.imshow(cv.cvtColor(v_background, cv.COLOR_BGR2RGB))
plt.title('Background')
plt.axis('off')
plt.subplot(1, 4, 3)
plt.imshow(cv.cvtColor(v_foreground, cv.COLOR_BGR2RGB))
plt.title('Foreground')
plt.axis('off')
plt.subplot(1, 4, 4)
plt.imshow(cv.cvtColor(hist_equ_img, cv.COLOR_BGR2RGB))
cv.imwrite('equ.jpg', hist_equ_img)
plt.title('Foreground Equalized Image')
plt.axis('off')
plt.tight_layout()
plt.show()import cv2 as cv
import matplotlib.pyplot as plt
import numpy as np

img_orig = cv.imread('jeniffer.jpg', cv.IMREAD_COLOR)

img_hsv = cv.cvtColor(img_orig, cv.COLOR_BGR2HSV)

h, s, v = cv.split(img_hsv)

plt.figure(figsize=(10, 10))

plt.subplot(1, 3, 1)
plt.imshow(h)
plt.title('H Channel')
cv.imwrite('H.jpg', h)

plt.subplot(1, 3, 2)
plt.imshow(s)
plt.title('S Channel')
cv.imwrite('S.jpg', s)

plt.subplot(1, 3, 3)
plt.imshow(v)
plt.title('V Channel')
cv.imwrite('v.jpg', v)

plt.show()

_,mask_v = cv.threshold(v, 155, 255, cv.THRESH_BINARY) 
plt.figure(figsize=(6, 6))
plt.imshow(mask_v)
plt.title('Mask')
plt.show()
cv.imwrite('mask.jpg', mask_v)
v_foreground = cv.bitwise_and(img_orig, img_orig, mask=mask_v)

v_foreground = cv.cvtColor(v_foreground, cv.COLOR_BGR2RGB)
plt.figure(figsize=(6, 6))
plt.imshow(v_foreground)
plt.title('Foreground')
plt.show()

cv.imwrite('foreground.jpg', v_foreground)

color = ('b', 'g', 'r')
for i, c in enumerate(color):
    hist = cv.calcHist([v_foreground], [i], None, [256], [0,256])
    plt.plot(hist, color = c)
    plt.xlim([0,256])
plt.title('Histogram of image in R, G, B')
plt.show()

hist_b = cv.calcHist([v_foreground], [0], None, [256], [0,256])
hist_g = cv.calcHist([v_foreground], [1], None, [256], [0,256])
hist_r = cv.calcHist([v_foreground], [2], None, [256], [0,256])

c_hist_r = np.cumsum(hist_r)
c_hist_g = np.cumsum(hist_g)
c_hist_b = np.cumsum(hist_b)


plt.figure(figsize=(15, 5))
plt.subplot(131)
plt.plot(c_hist_r, color='red')
plt.title('Cumulative Histogram of Red Channel')
plt.xlabel('Pixel Value')
plt.ylabel('Cumulative Frequency')
plt.subplot(132)
plt.plot(c_hist_g, color='green')
plt.title('Cumulative Green Channel Histogram')
plt.xlabel('Pixel Value')
plt.ylabel('Cumulative Frequency')
plt.subplot(133)
plt.plot(c_hist_b, color='blue')
plt.title('Cumulative Blue Channel Histogram')
plt.xlabel('Pixel Value')
plt.ylabel('Cumulative Frequency')
plt.tight_layout()
plt.show()

equ_b = cv.equalizeHist(v_foreground[:, :, 0])
equ_g = cv.equalizeHist(v_foreground[:, :, 1])
equ_r = cv.equalizeHist(v_foreground[:, :, 2])

equ_img = cv.merge((equ_b, equ_g, equ_r))

equ_hist_b = cv.calcHist([equ_img], [0], None, [256], [0, 256])
equ_hist_g = cv.calcHist([equ_img], [1], None, [256], [0, 256])
equ_hist_r = cv.calcHist([equ_img], [2], None, [256], [0, 256])

c_equ_hist_b = np.cumsum(equ_hist_b)
c_equ_hist_g = np.cumsum(equ_hist_g)
c_equ_hist_r = np.cumsum(equ_hist_r)

plt.figure(figsize=(14, 4))
plt.subplot(1, 2, 1)
plt.imshow(cv.cvtColor(v_foreground, cv.COLOR_BGR2RGB))
plt.title('Foreground')
plt.axis('off')
plt.subplot(1, 2, 2)
plt.imshow(cv.cvtColor(equ_img, cv.COLOR_BGR2RGB))
plt.title('Equalized Foreground')
plt.axis('off')
plt.tight_layout()
plt.show()

plt.figure(figsize=(14, 4))
plt.subplot(131)
plt.plot(c_equ_hist_r, color='red')
plt.title('Cumulative Histogram of Equalized Red Channel',fontsize=11)
plt.xlabel('Pixel Value')
plt.ylabel('Cumulative Frequency')
plt.subplot(132)
plt.plot(c_equ_hist_g, color='green')
plt.title('Cumulative Histogram of Equalized Green Channel',fontsize=11)
plt.xlabel('Pixel Value')
plt.ylabel('Cumulative Frequency')
plt.subplot(133)
plt.plot(c_equ_hist_b, color='blue')
plt.title('Cumulative Histogram of Equalized Blue Channel',fontsize=11)
plt.xlabel('Pixel Value')
plt.ylabel('Cumulative Frequency')
plt.tight_layout()
plt.show()

v_background = cv.bitwise_and(img_orig, img_orig, mask=cv.bitwise_not(mask_v)) 
hist_equ_img = cv.add(v_background, equ_img)

plt.figure(figsize=(6, 6))
plt.imshow(v_background, cmap='gray')
plt.title('Background on S Channel')
plt.show()

plt.figure(figsize=(14, 4))
plt.subplot(1, 4, 1)
plt.imshow(cv.cvtColor(img_orig, cv.COLOR_BGR2RGB))
plt.title('Original Image')
plt.axis('off')
plt.subplot(1, 4, 2)
plt.imshow(cv.cvtColor(v_background, cv.COLOR_BGR2RGB))
plt.title('Background')
plt.axis('off')
plt.subplot(1, 4, 3)
plt.imshow(cv.cvtColor(v_foreground, cv.COLOR_BGR2RGB))
plt.title('Foreground')
plt.axis('off')
plt.subplot(1, 4, 4)
plt.imshow(cv.cvtColor(hist_equ_img, cv.COLOR_BGR2RGB))
cv.imwrite('equ.jpg', hist_equ_img)
plt.title('Foreground Equalized Image')
plt.axis('off')
plt.tight_layout()
plt.show()
